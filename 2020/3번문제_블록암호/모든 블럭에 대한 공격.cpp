#include <iostream>
#include "decryptor.h"
#pragma warning(disable:4996)

Byte Original_IV[30][16] = { 0x22, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22 }; // G0 ~ G29
Byte MyIV[29][16] = { 0 }; //MyIV_0 ~ MyIV_28
Byte Dec[29][16] = { 0 }; // M_0 ~ M_28
Byte Plaintext[29][16] = { 0 }; // P_0 ~ P_28

int main(void)
{  Byte c1[29][16] = { // C_0 ~ C_28
		{0xC9, 0xA7, 0x35, 0xF6, 0xAC, 0x21, 0xEA, 0x31, 0x80, 0xE9, 0x1C, 0x33, 0x0F, 0x82, 0x5D, 0x46},
		{0xB1, 0x85, 0xCD, 0x40, 0x4F, 0xF0, 0x09, 0x87, 0xFD, 0xEB, 0x74, 0xDA, 0x6D, 0xC5, 0xF2, 0x94},
		{0x8F, 0x24, 0xFC, 0x5B, 0x17, 0x54, 0x70, 0x94, 0xE5, 0x7E, 0xF3, 0x54, 0x7F, 0x59, 0x3F, 0xF9},
		{0x57, 0x74, 0x33, 0x6D, 0x1A, 0xC4, 0x1D, 0x4E, 0x5D, 0xA1, 0xBA, 0x54, 0x39, 0x5E, 0xA4, 0x2F},
		{0xFB, 0x66, 0x05, 0x43, 0x87, 0xDA, 0x8D, 0x2D, 0xEA, 0xF1, 0x1B, 0xAF, 0xD8, 0x1E, 0xF4, 0xAA},
		{0xCF, 0x7B, 0x59, 0xA8, 0xF7, 0x27, 0xF1, 0x95, 0x7B, 0xBC, 0x56, 0x59, 0x53, 0x03, 0xEB, 0x2F},
		{0x22, 0x20, 0x53, 0x7C, 0x9B, 0xEF, 0x67, 0xBF, 0x94, 0x6B, 0xAA, 0x4E, 0x14, 0x60, 0x14, 0x2D},
		{0x0F, 0x68, 0x10, 0x86, 0x63, 0x68, 0x28, 0xA2, 0x70, 0x73, 0x05, 0x92, 0x4B, 0x36, 0xBE, 0xCD},
		{0xBE, 0x61, 0x55, 0x9A, 0x44, 0x61, 0x07, 0xA3, 0x0B, 0x24, 0x32, 0x28, 0xE0, 0xFC, 0x85, 0x57},
		{0x8E, 0x11, 0xA8, 0x60, 0xCA, 0x32, 0xD9, 0x68, 0x68, 0xB3, 0x7D, 0xAC, 0x30, 0x32, 0x82, 0x72},
		{0xAD, 0x8A, 0x10, 0xAA, 0x15, 0xC4, 0x63, 0x63, 0x0A, 0x20, 0xD7, 0xE8, 0x2B, 0x1D, 0x67, 0xCF},
		{0xD8, 0x4E, 0x9E, 0x12, 0xB6, 0x28, 0x30, 0xCA, 0xCE, 0x92, 0xF2, 0x7F, 0x82, 0xCD, 0x3A, 0x1B},
		{0xA5, 0xCD, 0xCC, 0xE0, 0xE4, 0xAF, 0xD2, 0xB1, 0xAA, 0xBA, 0x2A, 0xDF, 0xA7, 0xB0, 0x59, 0x74},
		{0x9B, 0xCA, 0xC5, 0xBD, 0xC3, 0x8E, 0xAE, 0xA7, 0x6A, 0xF4, 0x8C, 0x2F, 0x84, 0x16, 0x29, 0xE1},
		{0x8E, 0xAD, 0x5E, 0x88, 0x95, 0x83, 0x56, 0xEF, 0x48, 0x07, 0x8D, 0x09, 0x9F, 0x3F, 0x66, 0xB9},
		{0x5F, 0x48, 0x25, 0xA3, 0x0A, 0xE8, 0xA6, 0x58, 0x68, 0x4C, 0x1B, 0x96, 0x00, 0x7A, 0x42, 0x24},
		{0x1D, 0xD3, 0x25, 0xB3, 0xE0, 0x1E, 0x9B, 0x28, 0x09, 0xCC, 0x2E, 0x92, 0x47, 0x8C, 0x9F, 0xED},
		{0xEC, 0xE8, 0x67, 0x53, 0xA4, 0xAF, 0x91, 0x9B, 0x2D, 0x25, 0xFE, 0x07, 0x99, 0x41, 0xCF, 0x7F},
		{0xD8, 0x0E, 0xAD, 0x6E, 0x82, 0x1B, 0x7A, 0xE3, 0xB9, 0x28, 0x5C, 0x40, 0x88, 0x8C, 0xE9, 0xD4},
		{0xD5, 0x05, 0x26, 0x0B, 0x7D, 0xEE, 0x45, 0xD3, 0xB0, 0x89, 0x3B, 0xBF, 0x29, 0x57, 0xD1, 0xB6},
		{0x6F, 0x14, 0x80, 0x20, 0xFA, 0x2C, 0xE4, 0xA0, 0xFB, 0x5C, 0xE8, 0xB2, 0xBD, 0x84, 0x57, 0xAD},
		{0x21, 0x42, 0x29, 0x7C, 0xF1, 0xC3, 0x30, 0x16, 0x18, 0xB2, 0x6F, 0x3A, 0x4B, 0x5D, 0x76, 0x8A},
		{0x96, 0x78, 0x64, 0xCE, 0x16, 0x35, 0xDC, 0xCB, 0x2E, 0x7B, 0x2C, 0x61, 0xB3, 0x97, 0x47, 0x2C},
		{0xCD, 0xA2, 0x77, 0x1F, 0xDE, 0xFC, 0x87, 0x6E, 0x82, 0xD7, 0x9D, 0x55, 0xA5, 0xB9, 0x71, 0x5B},
		{0xA8, 0x21, 0x5C, 0x40, 0xD9, 0xF5, 0x1A, 0xFE, 0x7C, 0xCD, 0x6C, 0xB9, 0xAE, 0x52, 0xE0, 0x97},
		{0xD6, 0x54, 0x85, 0xAE, 0xFE, 0x73, 0x07, 0x14, 0xA4, 0xE1, 0x8C, 0xA4, 0xDB, 0xA6, 0x7E, 0x32},
		{0x98, 0xEC, 0x1D, 0x4A, 0x7B, 0xFA, 0xD6, 0x27, 0xA1, 0x4C, 0xC2, 0x52, 0x28, 0xDE, 0x1A, 0x39},
		{0xE5, 0xBF, 0x25, 0x4B, 0xCA, 0xC8, 0x98, 0x88, 0x8B, 0xBC, 0x61, 0x38, 0x73, 0xE9, 0xC1, 0x36},
		{0x8A, 0x27, 0xC8, 0xB0, 0x18, 0xEC, 0x1E, 0x00, 0xEF, 0x90, 0xB1, 0x7E, 0x59, 0xB1, 0x96, 0xD1}
	};
	struct CTX ctx1;

	for (int a = 0; a < 29; a++) {
		ctx1.ciphertext = c1[a];
		ctx1.cipher_length = 16;
		ctx1.IV = &MyIV[a][0];
		for (int i = 0; i < 16; i++) {
			for (int j = 0; j < 255; j++) {
				if (Dec_CTX(&ctx1) == 0) { // API 호출
					// 답안의 AddMyIV함수와 같은 역할
					// MyIV_K가 공격대상일 경우 MyIV_0 ~ MyIV_K-1에 모두 1을 더함
					for (int n = 0; n < 15 - i; n++) { 
						MyIV[a][n]++; 
					}
					if (Dec_CTX(&ctx1) == 0) { // API 호출
						if (i < 15) MyIV[a][15 - i] = MyIV[a][15 - i] ^ 0x80; // MyIV_n = MyIV_n ^ 0x80
						break;
					}
				}
				MyIV[a][15 - i]++; // INVALID 할 경우 MyIV값 1씩 증가 
			}
		}
		for (int z = 0; z < 16; z++) {
			if (z < 15) {
				Dec[a][15 - z] = MyIV[a][15 - z] ^ 0x00; // G_n = MyIV_n ^ S_n
			}
			else Dec[a][15 - z] = MyIV[a][15 - z] ^ 0x80; // G_n = MyIV_n ^ S_n
			
			Plaintext[a][15 - z] = Dec[a][15 - z] ^ Original_IV[a][15 - z]; // P_n = M_n ^ G_n
			Original_IV[a + 1][15 - z] = Plaintext[a][15 - z] ^ c1[a][15 - z]; // G_(n+1) = P_n ^ C_n
		}
	}

	// 공격 결과를 txt 파일로 출력
	FILE* fp = fopen("plaintext.txt", "w");
	for (int i = 0; i < 29; i++) {
		for (int j = 0; j < 16; j++) {
			fprintf(fp, "%c", Plaintext[i][j]);
		}
	}
	fclose(fp);
	return 0;
}